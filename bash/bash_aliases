# dotfiles/bash/bash_aliases

# bin directory
# ~/.binにsymlinkとどっちが良い？
# export PATH="$HOME/dotfiles/bin:$PATH"
export PATH="$HOME/.bin:$HOME/.local/bin:$PATH"

################################################################################
# Prompt
################################################################################
# gitリポジトリ補助
source $HOME/dotfiles/bash/git-prompt.sh

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# プロンプトに各種情報を表示
#GIT_PS1_SHOWDIRTYSTATE=1
#GIT_PS1_SHOWUPSTREAM=1
#GIT_PS1_SHOWUNTRACKEDFILES=
#GIT_PS1_SHOWSTASHSTATE=1

############### ターミナルのコマンド受付状態の表示変更
# \u ユーザ名
# \h ホスト名
# \W カレントディレクトリ
# \w カレントディレクトリのパス
# \n 改行
# \d 日付
# \[ 表示させない文字列の開始
# \] 表示させない文字列の終了
# \$ $
if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(__git_ps1)\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

################################################################################
# Alias
################################################################################

# enable color support of ls and also add handy aliases
#if [ -x /usr/bin/dircolors ]; then
#    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
#    alias ls='ls --color=auto'
#    #alias dir='dir --color=auto'
#    #alias vdir='vdir --color=auto'
#
#    alias grep='grep --color=auto'
#    alias fgrep='fgrep --color=auto'
#    alias egrep='egrep --color=auto'
#fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias cls='stty sane'
# Doesn't work so disable it
#if type devcontainer >/dev/null 2>&1; then
#  alias devcode='devcontainer open'
#fi


################################################################################
# Command
################################################################################
# linux homebrew
if [ -f /home/linuxbrew/.linuxbrew/bin/brew ]; then
  eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
  alias brew="PATH=/home/tetsuyainfra/.cargo/bin:/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/home/tetsuyainfra/dotfiles/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games brew"
fi

# NixOS
if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then
  . $HOME/.nix-profile/etc/profile.d/nix.sh
fi

# Rust
if [ -e $HOME/.cargo ]; then
  export PATH="$HOME/.cargo/bin:$PATH"
  source "$HOME/.cargo/env"
fi

# mise(like anyenv)
if [ -e $HOME/.local/bin/mise ]; then
  eval "$(~/.local/bin/mise activate bash)"
fi

# direnv
if type direnv >/dev/null 2>&1; then
	eval "$(direnv hook bash)"
fi

# Yarn
if type yarn >/dev/null 2>&1; then
	export PATH="$HOME/.yarn/bin:$PATH"
fi

# editor
if command -v vim 1>/dev/null 2>&1; then
  export EDITOR=vim
elif command -v vi 1>/dev/null 2>&1; then
  export EDITOR=vi
fi

# ssh-agent
# 有効時間（好きな秒数に設定)
#SSH_KEY_LIFE_TIME_SEC=3600
#SSH_AGENT_FILE=$HOME/.ssh-agent
#test -f $SSH_AGENT_FILE && source $SSH_AGENT_FILE > /dev/null 2>&1
#if [ $( ps -ef | grep ssh-agent | grep -v grep | wc -l ) -eq 0 ]; then
#    ssh-agent -t $SSH_KEY_LIFE_TIME_SEC > $SSH_AGENT_FILE
#    source $SSH_AGENT_FILE > /dev/null 2>&1
#fi
mkdir -p $HOME/.ssh/
chmod 700 $HOME/.ssh/

if [[ "$(uname -r)" == *microsoft* ]]; then
  wsl2_ssh_agent_bin="$HOME/.ssh/wsl2-ssh-agent"
  if [ -f "${wsl2_ssh_agent_bin}" ]; then
    eval $($wsl2_ssh_agent_bin)
  fi
fi

## GPGの設定
#export GPG_AGENT_SOCK=$HOME/.gnupg/S.gpg-agent
#ss -a | grep -q $GPG_AGENT_SOCK
#if [ $? -ne 0 ]; then
#        rm -rf $GPG_AGENT_SOCK
#        (setsid nohup socat UNIX-LISTEN:$GPG_AGENT_SOCK,fork EXEC:"$HOME/.ssh/wsl2-ssh-pageant.exe --gpg S.gpg-agen#t" >/dev/null 2>&1 &)
#fi
# use putty(pageant)
#export SSH_AUTH_SOCK="$HOME/.ssh/agent.sock"
#if ! ss -a | grep -q "$SSH_AUTH_SOCK"; then
#  rm -f "$SSH_AUTH_SOCK"
#  wsl2_ssh_pageant_bin="$HOME/.ssh/wsl2-ssh-pageant.exe"
#  if test -x "$wsl2_ssh_pageant_bin"; then
#    (setsid nohup socat UNIX-LISTEN:"$SSH_AUTH_SOCK,fork" EXEC:"$wsl2_ssh_pageant_bin" >/dev/null 2>&1 &)
#  else
#    echo >&2 "WARNING: $wsl2_ssh_pageant_bin is not executable."
#  fi
#  unset wsl2_ssh_pageant_bin
#fi

if [[ "$(uname -r)" == *microsoft* ]]; then
export GPG_AGENT_SOCK="$HOME/.gnupg/S.gpg-agent"
  if ! ss -a | grep -q "$GPG_AGENT_SOCK"; then
    rm -rf "$GPG_AGENT_SOCK"
    wsl2_ssh_pageant_bin="$HOME/.ssh/wsl2-ssh-pageant.exe"
    if test -x "$wsl2_ssh_pageant_bin"; then
      (setsid nohup socat UNIX-LISTEN:"$GPG_AGENT_SOCK,fork" EXEC:"$wsl2_ssh_pageant_bin --gpg S.gpg-agent" >/dev/null 2>&1 &)
    else
      export _BASH_ALIAS_GPG_ERR_MSG="${wsl2_ssh_pageant_bin} is not executable"
      # echo >&2 "WARNING: $wsl2_ssh_pageant_bin is not executable."
    fi
    unset wsl2_ssh_pageant_bin
  fi
fi

# use agent in tmux
#agent="$HOME/.ssh/agent"
#if [ -S "$SSH_AUTH_SOCK" ]; then
#    case $SSH_AUTH_SOCK in
#    /tmp/*/agent.[0-9]*)
#        ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
#    esac
#elif [ -S $agent ]; then
#    export SSH_AUTH_SOCK=$agent
#else
#    echo "no ssh-agent"
#fi

# bash_local
if [ -f ~/.bash_local ]; then
    . ~/.bash_local
fi

################################################################################
# Command completions
################################################################################
# コマンドの存在チェックしてたりするので最後尾で読み込む
if [ -e $HOME/.bash_completion.d ]; then
  nullglob_status=$(shopt -p nullglob)
    shopt -s nullglob
    for f in ~/.bash_completion.d/*.bash ; do
      source $f
    done
  $nullglob_status
fi


