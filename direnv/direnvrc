#use_pyenv() {
#  local python_version=$1
#  local pyenv_python=$(pyenv root)/versions/${python_version}/bin/python
#
#  if [[ ! -x "$pyenv_python" ]]; then
#    log_error "Error: $pyenv_python can't be executed."
#    return 1
#  fi
#
#  unset PYTHONHOME
#  local ve=$($pyenv_python -c "import pkgutil; print('venv' if pkgutil.find_loader('venv') else ('virtualenv' if pkgutil.find_loader('virtualenv') else ''))")
#
#  case $ve in
#    "venv")
#      VIRTUAL_ENV=$(direnv_layout_dir)/python-$python_version
#      export VIRTUAL_ENV
#      if [[ ! -d $VIRTUAL_ENV ]]; then
#        $($pyenv_python -m venv "$VIRTUAL_ENV")
#      fi
#      PATH_add "$VIRTUAL_ENV/bin"
#      ;;
#    "virtualenv")
#      layout python "$pyenv_python"
#      ;;
#    *)
#      log_error "Error: neither venv nor virtualenv are available."
#      return 1
#      ;;
#  esac
#  export PYENV_VERSION=$python_version
#}

layout_poetry() {
    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
    if [[ ! -f "$PYPROJECT_TOML" ]]; then
        log_status "No pyproject.toml found. Executing \`poetry init\` to create a \`$PYPROJECT_TOML\` first."
        poetry init
    fi

    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    else
        VIRTUAL_ENV=$(poetry env info --path 2>/dev/null ; true)
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`poetry install\` to create one."
        poetry install
        VIRTUAL_ENV=$(poetry env info --path)
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export POETRY_ACTIVE=1
    export VIRTUAL_ENV
}